#!/usr/bin/env bash

#
# Public: mk_cache() function for grav-mkcache.sh script.
#
function libgrav_mk::mk_cache() { #-# Public: mk_cache() function for grav-mkcache.sh script.
   local _RC=0
   local _GRAV_NAME="${1}"
   local _GRAV_CACHE="${2}"
 
    local _GRAV_CHOICE=""
   local _GRAV_ANSWER=""
   local _GRAV_VERB=""
   local _GRAV_VERB1="Created"
   local _GRAV_VERB2="Used own"

   if [[ -d "${_GRAV_CACHE}" ]]; then 
      _GRAV_CHOICE=2
      _GRAV_ANSWER=$(libgrav_common::multi_choice ${_GRAV_CHOICE} "Cache directory '${_GRAV_NAME}' in ${_GRAV_CACHE} already exists.
Overwrite (1), Retain (2) ")
   else
      # if does not exists, create an initial cache directory 
      _GRAV_ANSWER=1
   fi

   while true; do
      case "${_GRAV_ANSWER}" in
         1) 
            if [[ -d "${_GRAV_CACHE}"/.ccache ]]; then sudo rm -rf "${_GRAV_CACHE}"/.ccache; fi
            if [[ -d "${_GRAV_CACHE}"/.phpcache ]]; then sudo rm -rf "${_GRAV_CACHE}"/.phpcache; fi

            mkdir -p "${_GRAV_CACHE}"/.ccache;
            mkdir -p "${_GRAV_CACHE}"/.phpcache;

            sudo docker volume create \
               --driver local \
               --opt type=none \
               --opt device="${_GRAV_CACHE}" \
               --opt o=bind "grav_${_GRAV_NAME}" 1>/dev/stderr 1>/dev/null 2>&1

            echo "GRAV_CACHE=${_GRAV_CACHE}" > ${CFG_DIR}/.config.cache
   
            _GRAV_VERB="${_GRAV_VERB1}"
            break;
         ;;

         2) 
            _GRAV_VERB="${_GRAV_VERB2}"
            break;
         ;;
      esac
   done

   _RC=$?

   if [ ${_RC} -eq 0 ]; then libgrav_common::help " Info: ${_GRAV_VERB} cached directory '${_GRAV_NAME}' in ${_GRAV_CACHE}." "${NAME}"; fi

   return ${_RC}
}

#
# Public: mk_cert() function for grav-mkcert.sh script.
#
function libgrav_mk::mk_cert() { #-# Public: mk_cert() function for grav-mkcert.sh script.
   local _RC=0
   local _GRAV_NAME="${1}"
   local _GRAV_CERT="${2}"
 
   local _GRAV_CHOICE=""
   local _GRAV_ANSWER=""
   local _GRAV_VERB=""
   local _GRAV_VERB1="Created"
   local _GRAV_VERB2="Used own"

   if [[ -d "${_GRAV_CERT}" ]]; then 
      _GRAV_CHOICE=2
      _GRAV_ANSWER=$(libgrav_common::multi_choice ${_GRAV_CHOICE} "Data directory '${_GRAV_NAME}' in ${_GRAV_CERT} already exists.
Overwrite (1), Retain (2) ")
   else
      # if does not exists, create an initial cert directory 
      _GRAV_ANSWER=1
   fi

   while true; do
      case "${_GRAV_ANSWER}" in
         1) 
            if [[ -d "${_GRAV_CERT}" ]]; then sudo rm -rf "${_GRAV_CERT}"; fi

            mkdir -p ${_GRAV_CERT}

            sudo docker volume create \
               --driver local \
               --opt type=none \
               --opt device="${_GRAV_CERT}" \
               --opt o=bind "grav_${_GRAV_NAME}" 1>/dev/null 2>&1

            echo "GRAV_CERT=${_GRAV_CERT}" > ${CFG_DIR}/.config.cert

            _GRAV_VERB="${_GRAV_VERB1}"
            break;
         ;;

         2) 
            _GRAV_VERB="${_GRAV_VERB2}"
            break;
         ;;
      esac
   done
   
   _RC=$?

   if [ ${_RC} -eq 0 ]; then libgrav_common::help " Info: ${_GRAV_VERB} cert directory '${_GRAV_NAME}' in ${_GRAV_CERT}." "${NAME}"; fi

   return ${_RC}
}

#
# Public: mk_data() function for grav-mkdata.sh script.
#
function libgrav_mk::mk_data() { #-# Public: mk_data() function for grav-mkdata.sh script.
   local _RC=0
   local _GRAV_NAME="${1}"
   local _GRAV_DATA="${2}"
 
   local _GRAV_CHOICE=""
   local _GRAV_ANSWER=""
   local _GRAV_VERB=""
   local _GRAV_VERB1="Created"
   local _GRAV_VERB2="Used own"

   if [[ -d "${_GRAV_DATA}" ]]; then 
      _GRAV_CHOICE=2
      _GRAV_ANSWER=$(libgrav_common::multi_choice ${_GRAV_CHOICE} "Data directory '${_GRAV_NAME}' in ${_GRAV_DATA} already exists.
Overwrite (1), Retain (2) ")
   else
      # if does not exists, create an initial cache directory 
      _GRAV_ANSWER=1
   fi

   while true; do
      case "${_GRAV_ANSWER}" in
         1) 
            if [[ -d "${_GRAV_DATA}" ]]; then sudo rm -rf "${_GRAV_DATA}"; fi

            mkdir -p ${_GRAV_DATA}

            sudo docker volume create \
               --driver local \
               --opt type=none \
               --opt device="${_GRAV_DATA}" \
               --opt o=bind "grav_${_GRAV_NAME}" 1>/dev/null 2>&1

            echo "GRAV_DATA=${_GRAV_DATA}" > ${CFG_DIR}/.config.data

            _GRAV_VERB="${_GRAV_VERB1}"
            break;
         ;;

         2) 
            _GRAV_VERB="${_GRAV_VERB2}"
            break;
         ;;
      esac
   done
   
   _RC=$?

   if [ ${_RC} -eq 0 ]; then libgrav_common::help " Info: ${_GRAV_VERB} data directory '${_GRAV_NAME}' in ${_GRAV_DATA}." "${NAME}"; fi

   return ${_RC}
}

#
# Public: mk_pass() function for grav-mkpass.sh script.
#
function libgrav_mk::mk_pass() { #-# Public: mk_pass() function for grav-mkpass.sh script.
   local _RC=0
   local _GRAV_SECS="${1}"
   local _GRAV_USER="${2}"
   local _GRAV_PASS="${3}"
   local _GRAV_PW=""

#  _GRAV_PW="$(openssl passwd -6 -salt $(openssl rand -base64 32) ${_GRAV_SECS})"
   _GRAV_PW="$(openssl passwd -6 -salt $(uuid -v4 -n32 | tail -n1) ${_GRAV_SECS})"
  
   _RC=$?

   if [[ -f "${_GRAV_PASS}" ]]; then chmod 600 "${_GRAV_PASS}"; fi

   echo ${_GRAV_USER}:${_GRAV_PW} > "${_GRAV_PASS}"
   _RC=$?
   
   chmod 400 "${_GRAV_PASS}"

   echo "GRAV_USER=${_GRAV_USER}" > "${CFG_DIR}"/.config.user
   echo "GRAV_PASS=${_GRAV_PASS}" > "${CFG_DIR}"/.config.pass

   _RC=$?

   if [ ${_RC} -eq 0 ]; then libgrav_common::help " Info: Created encrypted password for user '${_GRAV_USER}' in ${KEY_DIR} directory." "${NAME}"; fi

   return ${_RC}
}

#
# Public: mk_ssh() function for grav-mkssh.sh script.
#
function libgrav_mk::mk_ssh() { #-# Public: mk_ssh() function for grav-mkssh.sh script.
   local _RC=0
   local _GRAV_EMAIL="${1}"
   local _GRAV_TYPE="${2}"
   local _GRAV_LENGTH="${3}"
   local _GRAV_SSH="${4}"

   local _GRAV_CHOICE=""
   local _GRAV_ANSWER=""
   local _GRAV_VERB=""
   local _GRAV_VERB1="Created"
   local _GRAV_VERB2="Used own"
   local _GRAV_VERB3="Reused"

   if [[ -e "${_GRAV_SSH}" ]] && [[ -e "${_GRAV_SSH}.pub" ]]; then
      _GRAV_CHOICE=3
      _GRAV_ANSWER=$(libgrav_common::multi_choice ${_GRAV_CHOICE} "${_GRAV_SSH} already exists.
(1) Overwrite, (2) Use own, (3) Reuse it ")
   else
      _GRAV_CHOICE=2
      _GRAV_ANSWER=$(libgrav_common::multi_choice ${_GRAV_CHOICE} "${_GRAV_SSH} already exists.
(1) Create, (2) Use own ")
   fi
   while true; do
      case "${_GRAV_ANSWER}" in
         1) 
            if [ ${_GRAV_CHOICE} -eq 2 ]; then _GRAV_VERB="${_GRAV_VERB1}"; else _GRAV_VERB="${_GRAV_VERB1} new"; fi
            if [[ -e "${_GRAV_SSH}" ]]; then rm -f ${_GRAV_SSH}; fi
            if [[ -e "${_GRAV_SSH}".pub ]]; then rm -f ${_GRAV_SSH}.pub; fi
            ssh-keygen -q -C "${_GRAV_EMAIL}" -t ${_GRAV_TYPE} -b ${_GRAV_LENGTH} -f "${_GRAV_SSH}" -N ''
            break;
         ;;

         2) 
            _GRAV_VERB="${_GRAV_VERB2}"
            if [[ -e "${_GRAV_SSH}" ]]; then rm -f ${_GRAV_SSH}; fi
            if [[ -e "${_GRAV_SSH}".pub ]]; then rm -f ${_GRAV_SSH}.pub; fi
            cp $HOME/.ssh/id_rsa ${KEY_DIR}/grav_rsa
            cp $HOME/.ssh/id_rsa.pub ${KEY_DIR}/grav_rsa.pub
            break;
         ;;

         3) 
            _GRAV_VERB="${_GRAV_VERB3}"
            break
         ;;
      esac
   done

   echo "GRAV_SSH=${_GRAV_SSH}" > ${CFG_DIR}/.config.ssh

   _RC=$?

   if [ ${_RC} -eq 0 ]; then libgrav_common::help " Info: ${_GRAV_VERB} SSH keys in ${KEY_DIR} directory." "${NAME}"; fi

   return ${_RC}
}
