#!/usr/bin/env bash

#
# Public: check_prereq() function for checking essential prerequisites
#
libgrav::check_prereq() { # Public: check_prereq() function for checking essential prerequisites
   # Minimal requirements
   local _DOCKER_MIN="${1}"
   local _BUILDX_MIN="${2}"
   local _JQ_MIN="${3}"
   local _OPENSSL_MIN="${4}"
   local _GIT_MIN="${5}"

   local _OS_NOW="$(libgrav::os_type)"
   local _ARCH_NOW="$(libgrav::machine_arch)"
   local _DOCKER_NOW="$(docker info --format '{{json .ServerVersion}}' | tr -d '"')"
   local _BUILDX_NOW="$(docker info --format '{{json .ClientInfo}}' | jq -r '.Plugins[] | select(.Name | contains("buildx")) | .Version ' | cut -d'v' -f2)"
   local _JQ_NOW="$(jq --version | cut -d'-' -f2)"
   local _OPENSSL_NOW="$(openssl version |  awk '{print $2}' | tr -dc '0-9.')"
   local _GIT_NOW="$(git --version | awk '{print $3}')"

   # Important for multi architecture detection
   local _DISTRO_NOW="$(cat /etc/*release 2>/dev/null | grep -w ID | cut -d'=' -f2)"

   # Check all required minimal versions
   if [ $(libgrav::version "${_DOCKER_NOW}") -lt $(libgrav::version ${_DOCKER_MIN}) ]; then 
      libgrav::error 2 "Error: Required version of docker is not available or met.\nPlease install at least required version: ${_DOCKER_MIN}."
   elif [ $(libgrav::version "${_BUILDX_NOW}") -lt $(libgrav::version ${_BUILDX_MIN}) ]; then 
      libgrav::error 2 "Error: Required version of docker buildx plugin is not available or met.\nPlease install at least required version: (${_BUILDX_MIN}."
   elif [ $(libgrav::version "${_JQ_NOW}") -lt $(libgrav::version ${_JQ_MIN}) ]; then 
      libgrav::error 2 "Error: Required version of jq is not available or met.\nPlease install at least required version: ${_JQ_MIN}."
   elif [ $(libgrav::version "${_OPENSSL_NOW}") -lt $(libgrav::version ${_OPENSSL_MIN}) ]; then 
      libgrav::error 2 "Error: Required version of openssl is not available or met.\nPlease install at least required version: ${_OPENSSL_MIN}."
   elif [ $(libgrav::version "${_GIT_NOW}") -lt $(libgrav::version ${_GIT_MIN}) ]; then 
      libgrav::error 2 "Error: Required version of git is not available or met.\nPlease install at least required version: ${_GIT_MIN}."
   fi

   # Set global directory variables
   echo "GRAV_OS=\"${_OS_NOW}\"" > "${_GRAV_CFG}"/.config.os
   echo "GRAV_ARCH=\"${_ARCH_NOW}\"" > "${_GRAV_CFG}"/.config.arch
   echo "GRAV_DISTRO=\"${_DISTRO_NOW}\"" > "${_GRAV_CFG}"/.config.distro
}

#
# Public: init() function for setting all directory variables globally.
#
function libgrav::init() { # Public: init() function for setting all directory variables globally.
#
   # Remove enclosing double quotes
   if [[ -e "${CTX_DIR}/.config.root" ]]; then ROOT_DIR="$(cat ${CTX_DIR}/.config.root | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.cache" ]]; then CACHE_DIR="$(cat ${CTX_DIR}/.config.cache | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.data" ]]; then DATA_DIR="$(cat ${CTX_DIR}/.config.data | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.docker" ]]; then DOCK_DIR="$(cat ${CTX_DIR}/.config.docker | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.bin" ]]; then BIN_DIR="$(cat ${CTX_DIR}/.config.bin | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.cfg" ]]; then CFG_DIR="$(cat ${CTX_DIR}/.config.cfg | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.key" ]]; then KEY_DIR="$(cat ${CTX_DIR}/.config.key | tr -d '"' | cut -d'=' -f2)"; fi
}

#
# Public: error() function for all shell scripts.
#
function libgrav::error() { # Public: error() function for all shell scripts.
   local _RC=${1}
   local _TEXT="${2}"

   case ${_RC}  in
      *)
         echo ""
         echo -e ${_TEXT}
      ;;
   
   esac
   
   exit ${_RC}
}

#
# Public: help() function for all shell scripts.
#
function libgrav::help() { # Public: help() function for all shell scripts.
   local _HELP="${1}"
   
   echo ""
   echo -e "${_HELP}"
   echo ""
}

#
# Public: machine_arch() return the new machine architecture string
#
libgrav::machine_arch() {
   local _ARCH=""

   case "$(uname -m)" in
       "x86_64") _ARCH="amd64"; ;;
      "aarch64") _ARCH="arm64"; ;;
              *) _ARCH="unknown"; ;;
   esac

   echo ${_ARCH} | tr '[:upper:]' '[:lower:]'
}

#
# Public: multi_choice() user input function.
#
function libgrav::multi_choice() { # Public: multi_choice() user input function.
   local _TYPE=${1:-2}
   local _TEXT="${2}"

   local _RC=1
   local _INFO=""

   for (( idx=1; idx<=${_TYPE}; idx++ )); do  
      local _OK${idx}="ok"
      local _INFO="${_INFO}${idx}/"
   done
   
   while true; do
      read -p "${_TEXT} (${_ Info:0:-1})? " _ANSWER
      
      if [ $? -ge 128 ]; then _RC=1; break; fi

      if [ "${_ANSWER}" -eq 1 ] && [ "${_OK1}" == "ok" ]; then _RC=1; break;
      elif [ "${_ANSWER}" -eq 2 ] && [ "${_OK2}" == "ok" ]; then _RC=2; break;
      elif [ "${_ANSWER}" -eq 3 ] && [ "${_OK3}" == "ok" ]; then _RC=3; break;
      elif [ "${_ANSWER}" -eq 4 ] && [ "${_OK4}" == "ok" ]; then _RC=4; break;
      fi
   done

   echo ${_RC}
}

#
# Public: usage() function for all shell scripts.
#
function libgrav::usage() { # Public: usage() function for all shell scripts.
   local _RC=${1}
   local _TEXT="${2}"
   local _ARGS="${3:-""}"
   local _NOTE="${4:-""}"
   local _INFO="${5:-""}"
   local _HELP="${6:-""}"
   local _ARG1="${7:-""}"
   local _ARG2="${8:-""}"
   local _ARG3="${9:-""}"
   local _ARG4="${10:-""}"
   local _ARG5="${11:-""}"
   local _ARG6="${12:-""}"
   local _ARG7="${13:-""}"

   case ${_RC}  in
      1)
         echo "${_TEXT}"
         echo ""
         echo "${_ARGS}"
         echo "${_NOTE}"
         echo ""
         test ! -z "${_ARG1}" && echo "${_ARG1}"
         test ! -z "${_ARG2}" && echo "${_ARG2}"
         test ! -z "${_ARG3}" && echo "${_ARG3}"
         test ! -z "${_ARG4}" && echo "${_ARG4}"
         test ! -z "${_ARG5}" && echo "${_ARG5}"
         test ! -z "${_ARG6}" && echo "${_ARG6}"
         test ! -z "${_ARG7}" && echo "${_ARG7}"
         echo ""
         echo "${_INFO}"
         libgrav::help "${_HELP}"
      ;;

      *)
         echo ""
         echo ${_TEXT}
      ;;
   
   esac
   
   exit ${_RC}
}

#
# Public: os_type() return the current operating system string
#
libgrav::os_type() { # Public: os_type(): return the current operating system
   local _OSTYPE=""

   case "$(uname -o)" in
      "GNU/Linux") _OSTYPE="linux"; ;;
         "Darwin") _OSTYPE="darwin"; ;;
                *) _OSTYPE="unknown"; ;;
   esac

   echo ${_OSTYPE}
}

#
# Public: version(): Build version of a three digit string (X.Y.Z) to be compared arithmetically
#
libgrav::version() { # Public: version() Build version of a three digit string (X.Y.Z) to be compared arithmetically
   local _VERSION="${@}"

   echo "${_VERSION}" | awk -F. '{ printf("%d%04d%04d\n", $1,$2,$3); }'
}
