#!/usr/bin/env bash

#
# Multichoice user input function
#
multichoice() {
   local _TYPE=${1:-2}
   local _TEXT="${2}"

   local _RC=1
   local _INFO=""

   for (( idx=1; idx<=${_TYPE}; idx++ )); do  
      local _OK${idx}="ok"
      local _INFO="${_INFO}${idx}/"
   done
   
   while true; do
      read -p "${_TEXT} (${_INFO:0:-1})? " _ANSWER
      
      if [ $? -ge 128 ]; then _RC=1; break; fi

      if [ "${_ANSWER}" -eq 1 ] && [ "${_OK1}" == "ok" ]; then _RC=1; break;
      elif [ "${_ANSWER}" -eq 2 ] && [ "${_OK2}" == "ok" ]; then _RC=2; break;
      elif [ "${_ANSWER}" -eq 3 ] && [ "${_OK3}" == "ok" ]; then _RC=3; break;
      elif [ "${_ANSWER}" -eq 4 ] && [ "${_OK4}" == "ok" ]; then _RC=4; break;
      fi

      #case ${_ANSWER} in
      #      1 ) _RC=1; break; ;;
      #      2 ) _RC=2; break; ;;
      #      3 ) _RC=3; break; ;;
      #      * ) _RC=1; ;;
      #esac
   done

   echo ${_RC}
}

#
# Init function for setting all directory variables globally
#
init() {
   # Remove enclosing double quotes
   if [[ -e "${CTX_DIR}/.config.root" ]]; then ROOT_DIR="$(cat ${CTX_DIR}/.config.root | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.cache" ]]; then CACHE_DIR="$(cat ${CTX_DIR}/.config.cache | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.data" ]]; then DATA_DIR="$(cat ${CTX_DIR}/.config.data | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.docker" ]]; then DOCK_DIR="$(cat ${CTX_DIR}/.config.docker | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.bin" ]]; then BIN_DIR="$(cat ${CTX_DIR}/.config.bin | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.cfg" ]]; then CFG_DIR="$(cat ${CTX_DIR}/.config.cfg | tr -d '"' | cut -d'=' -f2)"; fi
   if [[ -e "${CTX_DIR}/.config.key" ]]; then KEY_DIR="$(cat ${CTX_DIR}/.config.key | tr -d '"' | cut -d'=' -f2)"; fi
}

#
# help function for all shell scripts
#
help() {
   local _HELP="${1}"
   
   echo ""
   echo -e "${_HELP}"
   echo ""
}

#
# usage function for all shell scripts
#
usage() {
   local _RC=${1}
   local _TEXT="${2}"
   local _ARGS="${3:-""}"
   local _NOTE="${4:-""}"
   local _INFO="${5:-""}"
   local _HELP="${6:-""}"
   local _ARG1="${7:-""}"
   local _ARG2="${8:-""}"
   local _ARG3="${9:-""}"
   local _ARG4="${10:-""}"
   local _ARG5="${11:-""}"
   local _ARG6="${12:-""}"
   local _ARG7="${13:-""}"

   case ${_RC}  in
      1)
         echo "${_TEXT}"
         echo ""
         echo "${_ARGS}"
         echo "${_NOTE}"
         echo ""
         test ! -z "${_ARG1}" && echo "${_ARG1}"
         test ! -z "${_ARG2}" && echo "${_ARG2}"
         test ! -z "${_ARG3}" && echo "${_ARG3}"
         test ! -z "${_ARG4}" && echo "${_ARG4}"
         test ! -z "${_ARG5}" && echo "${_ARG5}"
         test ! -z "${_ARG6}" && echo "${_ARG6}"
         test ! -z "${_ARG7}" && echo "${_ARG7}"
         echo ""
         echo "${_INFO}"
         help "${_HELP}"
      ;;

      *)
         echo ""
         echo ${_TEXT}
      ;;
   
   esac
   
   exit ${_RC}
}

#
# error function for all shell scripts
#
error() {
   local _RC=${1}
   local _TEXT="${2}"

   case ${_RC}  in
      *)
         echo ""
         echo ${_TEXT}
      ;;
   
   esac
   
   exit ${_RC}
}
