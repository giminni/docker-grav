#!/usr/bin/env bash

#
# mkcache function for grav_mkcache.sh script
#
mkcache() {
   local _RC=0
   local _GRAV_NAME="${1}"
   local _GRAV_CACHE="${2}"
 
   sudo docker volume create \
      --driver local \
      --opt type=none \
      --opt device="${_GRAV_CACHE}" \
      --opt o=bind "${_GRAV_NAME}" 1>/dev/stderr
   
   mkdir -p "${_GRAV_CACHE}"/.ccache
   echo "GRAV_CACHE=${_GRAV_CACHE}" > ${CFG_DIR}/.config.cache
   
   help "INFO: Created cached directory '${_GRAV_NAME}' in ${_GRAV_CACHE}."

   _RC=$?

   return ${_RC}
}

#
# mkdata function for grav_mkdata.sh script
#
mkdata() {
   local _RC=0
   local _GRAV_NAME="${1}"
   local _GRAV_DATA="${2}"
 
   sudo docker volume create \
      --driver local \
      --opt type=none \
      --opt device="${_GRAV_DATA}" \
      --opt o=bind "${_GRAV_NAME}" 1>/dev/stderr
   
   mkdir -p ${_GRAV_DATA}
   echo "GRAV_DATA=${_GRAV_DATA}" > ${CFG_DIR}/.config.data
   
   help "INFO: Created data directory '_GRAV_NAME' in ${_GRAV_DATA}."

   _RC=$?

   return ${_RC}
}

#
# Mkinit function for grav_mkinit.sh script
#
mkinit() {
   local _RC=0
   local _GRAV_CMD="${1}"
   local _GRAV_HOME="${2}" 
   local _GRAV_ROOT="${3}" 
   local _GRAV_CACHE="${4}" 
   local _GRAV_DATA="${5}" 
   local _GRAV_DOCK="${6}" 
   local _GRAV_BIN="${7}" 
   local _GRAV_CFG="${8}" 
   local _GRAV_KEY="${9}" 
   local _GRAV_LIB="${10}"

   case "${_GRAV_CMD}" in
      init)
         # Set global directory variables
         echo "GRAV_HOME=\"${_GRAV_HOME}\"" > "${_GRAV_CFG}"/.config.home 
         echo "GRAV_ROOT=\"${_GRAV_ROOT}\"" > "${_GRAV_CFG}"/.config.root 
         #echo "GRAV_CACHE=\"${_GRAV_CACHE}\"" > "${_GRAV_CFG}"/.config.cache
         #echo "GRAV_DATA=\"${_GRAV_DATA}\"" > "${_GRAV_CFG}"/.config.data
         echo "GRAV_DOCK=\"${_GRAV_DOCK}\"" > "${_GRAV_CFG}"/.config.docker
         echo "GRAV_BIN=\"${_GRAV_BIN}\"" > "${_GRAV_CFG}"/.config.bin 
         echo "GRAV_CFG=\"${_GRAV_CFG}\"" > "${_GRAV_CFG}"/.config.cfg
         echo "GRAV_KEY=\"${_GRAV_KEY}\"" > "${_GRAV_CFG}"/.config.key
         echo "GRAV_LIB=\"${_GRAV_LIB}\"" > "${_GRAV_CFG}"/.config.lib 
         echo "GRAV_CTX=\"${_GRAV_CFG}\"" > "${_GRAV_HOME}"/.context

         # Replace grav-bin entry in .bashrc file
         if [ -e "${HOME}/.bashrc" ] && [ "${SHELL}" == "/bin/bash" ]; then 
            sed -i "/# docker-grav #/d" ${HOME}/.bashrc
            echo "export PATH=${PWD}/grav_bin:\${PATH} # docker-grav #" >> ${HOME}/.bashrc
         fi

         # Set current grav core version strings
         "${BIN_DIR}"/grav_setcore.sh prod
         "${BIN_DIR}"/grav_setcore.sh dev
      ;;
      
      
      *) error 2 "FAIL: Argument is not defined: ${_GRAV_CMD}!"
      ;;

   esac

   return ${_RC}
}

#
# mkpass function for grav_mkpass.sh script
#
mkpass() {
   local _RC=0
   local _GRAV_SECS="${1}"
   local _GRAV_USER="${2}"
   local _GRAV_PASS="${3}"
   local _GRAV_PW=""

   _GRAV_PW="$(openssl passwd -6 -salt $(openssl rand -base64 32) ${_GRAV_SECS})"
   
   _RC=$?

   if [[ -f "${_GRAV_PASS}" ]]; then chmod 600 "${_GRAV_PASS}"; fi

   echo ${_GRAV_USER}:${_GRAV_PW} > "${_GRAV_PASS}"
   _RC=$?
   
   chmod 400 "${_GRAV_PASS}"

   echo "GRAV_USER=${_GRAV_USER}" > "${CFG_DIR}"/.config.user
   echo "GRAV_PASS=${_GRAV_PASS}" > "${CFG_DIR}"/.config.pass
   
   help "INFO: Created encrypted password for user '${_GRAV_USER}' in ${KEY_DIR} directory."

   return ${_RC}
}

#
# mkssh function for grav_mkssh.sh script
#
mkssh() {
   local _RC=0
   local _GRAV_EMAIL="${1}"
   local _GRAV_TYPE="${2}"
   local _GRAV_LENGTH="${3}"
   local _GRAV_SSH="${4}"

   local _GRAV_CHOICE=""
   local _GRAV_ANSWER=""
   local _GRAV_VERB=""
   local _GRAV_VERB1="Created"
   local _GRAV_VERB2="Used own"
   local _GRAV_VERB3="Reused"

   if [ -e "${_GRAV_SSH}" ] && [ -e "${_GRAV_SSH}.pub" ]; then
      _GRAV_CHOICE=3
      _GRAV_ANSWER=$(multichoice ${_GRAV_CHOICE} "${_GRAV_SSH} already exists.
(1) Overwrite, (2) Use own, (3) Reuse it ")
   else
      _GRAV_CHOICE=2
      _GRAV_ANSWER=$(multichoice ${_GRAV_CHOICE} "${_GRAV_SSH} already exists.
(1) Create, (2) Use own ")
   fi
   while true; do
      case "${_GRAV_ANSWER}" in
         1) 
            if [ ${_GRAV_CHOICE} -eq 2 ]; then _GRAV_VERB="${_GRAV_VERB1}"; else _GRAV_VERB="${_GRAV_VERB1} new"; fi
            if [[ -e "${_GRAV_SSH}" ]]; then rm -f ${_GRAV_SSH}; fi
            if [[ -e "${_GRAV_SSH}".pub ]]; then rm -f ${_GRAV_SSH}.pub; fi
            ssh-keygen -q -C "${_GRAV_EMAIL}" -t ${_GRAV_TYPE} -b ${_GRAV_LENGTH} -f "${_GRAV_SSH}" -N ''
            break;
         ;;

         2) 
            _GRAV_VERB="${_GRAV_VERB2}"
            if [[ -e "${_GRAV_SSH}" ]]; then rm -f ${_GRAV_SSH}; fi
            if [[ -e "${_GRAV_SSH}".pub ]]; then rm -f ${_GRAV_SSH}.pub; fi
            cp $HOME/.ssh/id_rsa ${KEY_DIR}/grav_rsa
            cp $HOME/.ssh/id_rsa.pub ${KEY_DIR}/grav_rsa.pub
            break;
         ;;

         3) 
            _GRAV_VERB="${_GRAV_VERB3}"
            break
         ;;
      esac
   done

   echo "GRAV_SSH=${_GRAV_SSH}" > ${CFG_DIR}/.config.ssh

   help "INFO: ${_GRAV_VERB} SSH keys in ${KEY_DIR} directory."

   _RC=$?

   return ${_RC}
}
